import React, { createContext, useContext, useState } from "react";

const PageNavigationContext = createContext(null);

export const PageNavigationProvider = ({ children }) => {
  const handleExitPage = (setHoverIsActive, setIsUnfaded, useNavContext) => {
    setHoverIsActive(false);
    setIsUnfaded(false);
    setTimeout(() => handleClearPages(useNavContext), 1500);
  };

  const handleClickAbout = (useNavContext) => {
    const { setIsClickedAbout, setIsClickedIndD, setIsClickedWebD } =
      useNavContext();
    setIsClickedAbout(true);
    setIsClickedWebD(false);
    setIsClickedIndD(false);
  };

  const handleClickWebD = (useNavContext) => {
    const { setIsClickedAbout, setIsClickedIndD, setIsClickedWebD } =
      useNavContext();
    setIsClickedAbout(false);
    setIsClickedWebD(true);
    setIsClickedIndD(false);
  };

  const handleClickIndD = (useNavContext) => {
    const { setIsClickedAbout, setIsClickedIndD, setIsClickedWebD } =
      useNavContext();
    setIsClickedAbout(false);
    setIsClickedWebD(false);
    setIsClickedIndD(true);
  };

  const handleClearPages = (useNavContext) => {
    const { setIsClickedAbout, setIsClickedIndD, setIsClickedWebD } =
      useNavContext();
    setIsClickedAbout(false);
    setIsClickedWebD(false);
    setIsClickedIndD(false);
  };

  const value = {
    handleExitPage,
    handleClickAbout,
    handleClickWebD,
    handleClickIndD,
    handleClearPages,
  };

  return (
    <PageNavigationContext.Provider value={value}>
      {children}
    </PageNavigationContext.Provider>
  );
};

// Hook to consume the context
export const usePageNav = () => {
  const context = useContext(PageNavigationContext);
  if (!context) {
    throw new Error("usePageNav must be used within a PageNavigationProvider");
  }
  return context;
};
